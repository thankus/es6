1、es6模块
  在es6前，实现模块化使用的是RequireJS 或者 seajs（分别基于AMD规范的模块化库，和基于CMD规范的模块化库），es6引入了模块化，其设计思想在编译时就能确定模块的依赖关系，以及输入和输出的变量。
  ES6的模块化分别为导出（export）和 导入（import）两个模块
  
  es6的模块自动开启严格模式，不管你有没有在模块头部加上use strict
  模块中可以导入和导出各种类型的变量，如函数，对象，字符串，数字，布尔值，类等
  每个模块都有自己的上下文，每一个模块内声明的变量都是局部变量，不会污染全局作用域，
  每个模块只加载一次（是单例的），若再去加载同目录下同文件，直接从内存中读取
  
  export 和 import
  
  导出的函数声明和类声明必须要有名称（export default命令另外考虑）
  不仅能导出声明，还能导出引用（例如函数）
  export命令可以出现在模块的任何位置，但必须处于模块顶层
  import命令会提升到整个模块的头部，首先执行
  /*-----export [test.js]-----*/
let myName = "Tom";
let myAge = 20;
let myfn = function(){
    return "My name is" + myName + "! I'm '" + myAge + "years old."
}
let myClass =  class myClass {
    static a = "yeah!";
}
export { myName, myAge, myfn, myClass }
 
/*-----import [xxx.js]-----*/
import { myName, myAge, myfn, myClass } from "./test.js";
console.log(myfn());// My name is Tom! I'm 20 years old.
console.log(myAge);// 20
console.log(myName);// Tom
console.log(myClass.a );// yeah!

建议使用{}指定所要输出的一组变量写在文档尾部，明确导出的接口
函数和类都需要对应的名称，导出文档尾部也避免了无对应名称

as  的 用法

export 命令导出的接口名称，需和模块内部的变量有一一对应关系
导入的变量名需要导出的接口名称相同，即顺序可以不一致
/*-----export [test.js]-----*/
let myName = "Tom";
export { myName as exportName }
 
/*-----import [xxx.js]-----*/
import { exportName } from "./test.js";
console.log(exportName);// Tom
使用 as 重新定义导出的接口名称，隐藏模块内部的变量
/*-----export [test1.js]-----*/
let myName = "Tom";
export { myName }
/*-----export [test2.js]-----*/
let myName = "Jerry";
export { myName }
/*-----import [xxx.js]-----*/
import { myName as name1 } from "./test1.js";
import { myName as name2 } from "./test2.js";
console.log(name1);// Tom
console.log(name2);// Jerry
不同模块导出接口名称命名重复，使用as重新定义变量名

import命令的特点
只读属性
  不允许在加载模块的脚本里面，修改接口的引用指向，即可以改写import变量类型为对象的属性值，不能改写import变量类型为基本类型的值
  import {a} from "./xxx.js"
  a = {}; // error
 
  import {a} from "./xxx.js"
  a.foo = "hello"; // a = { foo : 'hello' }
  
  单例模式
  多次重复执行同一句import语句，那么只会执行一次，而不会执行多次，import同一模块，声明不同接口引用，会声明对应变量，但会执行一次import
  import { a } "./xxx.js";
import { a } "./xxx.js";
// 相当于 import { a } "./xxx.js";
 
import { a } from "./xxx.js";
import { b } from "./xxx.js";
// 相当于 import { a, b } from "./xxx.js";

静态执行特性：
  import是静态执行，所以不能使用表达式和变量
  import { "f" + "oo" } from "methods";
// error
let module = "methods";
import { foo } from module;
// error
if (true) {
  import { foo } from "method1";
} else {
  import { foo } from "method2";
}
// error

export default 命令
  在一个文件和模块中，export和import可以有多个，export default仅有一个
  export default 中的 default是对应的导出接口变量
  通过export方式导出，在导入时要加{}，export default则不需要
  export default向外暴漏的成员，可以使用任意变量来接收
  
  var a = "My name is Tom!";
export default a; // 仅有一个
export default var c = "error"; 
// error，default 已经是对应的导出变量，不能跟着变量声明语句
 
import b from "./xxx.js"; // 不需要加{}， 使用任意变量接收

复合使用
  export 与 import 可以在同一模块使用，使用特点：
  可以将导出接口改名，包括 default。
  复合使用 export 与 import ，也可以导出全部，当前模块导出的接口会覆盖继承导出的。
  export { foo, bar } from "methods";
 
// 约等于下面两段语句，不过上面导入导出方式该模块没有导入 foo 与 bar
import { foo, bar } from "methods";
export { foo, bar };
 
/* ------- 特点 1 --------*/
// 普通改名
export { foo as bar } from "methods";
// 将 foo 转导成 default
export { foo as default } from "methods";
// 将 default 转导成 foo
export { default as foo } from "methods";
 
/* ------- 特点 2 --------*/
export * from "methods";



